<?xml version="1.0"?>
<!--
Correcteur terminologique - Ã©radication des anglicismes.
Copyright (C) 2006 Linagora SA - Manuel Odesser modesser@linagora.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
-->
<project name="terminologie" default="package">
	<description>This ant file is only to package the AnglicismeThesaurus component</description>
	
	
	<!--
**********************************************************************************************************	    
	    Warning, those variable are SYSTEM SPECIFIC, you should set them properly
	    before making any attempt to use run this Ant script.
**********************************************************************************************************
	    -->
	
	<property name="unopkg.exe"	value="/usr/lib/openoffice.org/program/unopkg.bin"		/>
	<property name="project.lib"	value="/usr/lib/openoffice.org/program/classes/"/>

	
	<property name="out.path" 	value="bin/ant" 		/>
	<property name="version" 	value="0.3" 			/>
	<property name="src"		value="src/java"			/>
	
	
	<property name="target"		value="target"			/>
	<property name="classes"	value="${target}/classes"	/>
	<property name="package"	value="${target}/package"	/>	
	<property name="dict"		value="data"			/>
	<property name="tests"		value="tests"			/>
	<property name="tests.classes"	value="${target}/tests/classes"	/>
	<property name="tests.reports"	value="${target}/reports/test"	/>
	
	<!-- If REPO is set, tools will maven 2 local repository -->
	<property name="REPO"		value="/home/rpelisse/.m2/repository"	/>
	<property name="rulesets"	value="resources/pmd.xml"	/>
	
	<path id="project.classpath">
		<fileset dir="${project.lib}">
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="clean"
		description="Clean working directory">
		<delete dir="${target}" />
	</target>	
	
	<target name="init" 
		depends="clean"
		description="Set up working directory">
		<mkdir dir="${basedir}/${target}"/>
	</target>

	<target name="compile" 
		depends="init"
		description="Compile project source code">
		
		<mkdir dir="${classes}"/>
		<javac srcdir="${src}"
		       destdir="${classes}"
		       debug="true"> <!-- FIXME: should not be debug for release-->
			<classpath refid="project.classpath"/>
		</javac>
	</target>
	
	<!-- Assembling the jar file -->
	
	<target name="jar" 
		depends="compile"
		description="Create jar file">

		<jar 	basedir="${classes}" 
		     	includes="**/*" 
			destfile="${target}/${ant.project.name}-${version}.jar">
			<manifest>
				<attribute 	name="RegistrationClassName" 		
						value="org.linagora.clients.minefi.dpma.terminologie.AnglicismeThesaurus" />
			</manifest>
			<fileset dir="data"/>
		</jar>
		
	</target>
	
	<!-- Building the pkg file for OOo -->
	
	<target name="package" 
		depends="jar"
		description="Package application for OOo">
	
		<mkdir  dir="${package}"/> <!-- we just need an empty directory as a basedir -->
		<zip 	destfile="${target}/${ant.project.name}-${version}.uno.pkg"
		     	basedir="${package}">
			<fileset dir="${basedir}/resources"	includes="META-INF/manifest.xml"		/>
			<fileset dir="${basedir}" 		includes="README"				/>
			<fileset dir="${basedir}" 		includes="COPYING"				/>
			<fileset dir="${basedir}"		includes="resources/ChangeLog"			/>
			<fileset dir="${basedir}/lib"		includes="dialogLib/"				/>
			<fileset dir="${basedir}/lib"		includes="starBasicLib/"			/>
			<fileset dir="${basedir}/resources"	includes="images/"				/>
			<fileset dir="${basedir}/resources"     includes="Addons.xcu"   			/>
                        <fileset dir="${basedir}/resources"     includes="StartupJob.xcu"       		/>
			<fileset dir="${classes}"								/>
			<fileset dir="${target}"		includes="${ant.project.name}-${version}.jar"	/>
		</zip>
		<delete dir="${package}" />
	</target>

	<!-- Unit test execution -->
	<target name="compile-test">
		<mkdir dir="${tests.classes}"/>
		<javac  srcdir="${tests}"
			destdir="${tests.classes}">
			<classpath refid="project.classpath" />
			<classpath location="${classes}" />
		</javac>
	</target>
	
	<target name="test" 
		depends="compile,compile-test"
		description="Run project unit test">
		<mkdir dir="${tests.reports}"/>
		<junit  fork="yes"
			dir="${basedir}"
			failureProperty="test.failed">
			<!-- JUnit does requies project dependancies -->
			<classpath refid="project.classpath"/>
			<classpath location="${classes}" />
			<classpath location="${tests.classes}" />
			<classpath location="${dict}" />
						
			<!-- XML output for result    -->
			<formatter type="xml" />

			<batchtest todir="${tests.reports}">
				<fileset dir="${tests}">
					<include name="**/*.java" />
				</fileset>
			</batchtest>
		</junit>
		
        </target>
	
	<!-- OOo integration test -->
	
	<target name="deploy">
		<exec executable="${unopkg.exe}"
		      failonerror="yes"
		      failifexecutionfails="yes">
			<arg value="add"/>
			<arg value="-v"/>
			<arg file="${target}/${ant.project.name}-${version}.uno.pkg"/>
		</exec>
	</target>
	
	<target name="remove">
		<exec executable="${unopkg.exe}"
		      failonerror="yes"
		      failifexecutionfails="yes">
			<arg value="remove"/>
			<arg value="-v"/>
			<arg value="${ant.project.name}-${version}.uno.pkg"/>
		</exec>
	</target>

	<!-- 
	     QA tools
	-->
	     
	
	<target name="quality" depends="pmd"  description="Java Code Quality Control"/>
	
	<target name="pmd" depends="init">
		<path id="pmd.classpath">
			<pathelement location="${REPO}/pmd/pmd/4.2.4/pmd-4.2.4.jar" />
			<pathelement location="${REPO}/asm/asm/3.1/asm-3.1.jar" />
			<pathelement location="${REPO}/backport-util-concurrent/backport-util-concurrent/3.1/backport-util-concurrent-3.1.jar"/>
			<pathelement location="${REPO}/jaxen/jaxen/1.1.1/jaxen-1.1.1.jar" />
			<pathelement location="${rulesets}"/>
		</path>
		
		<taskdef 	name="pmd"
				classname="net.sourceforge.pmd.ant.PMDTask">
			<classpath refid="pmd.classpath" />
		</taskdef>
		
		<!-- PMD -->
		<pmd 	targetjdk="1.5"
			shortFilenames="true"
			rulesetfiles="${rulesets}">
			<formatter 	type="xml"
					toFile="${target}/pmd.xml"
					linePrefix=".line" />
			<formatter 	type="html"
					toFile="${target}/pmd.html"/>
			<fileset 	dir="${src}">
				<include name="**/*.java" />
			</fileset>
		</pmd>
		
		<xslt 	in="${target}/pmd.xml" 
			style="/perso/workspace/pmd-4.2.4/etc/pmd-nicerhtml.xsl" 
			out="${target}/pmd.html" />
		<!-- Looking for cut'n'paste code -->
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask">
			<classpath refid="pmd.classpath" />
		</taskdef>
		
		<cpd 	minimumTokenCount="10"
			outputFile="${target}/cpd.xml">
			<fileset 	dir="${src}">
				<include name="**/*.java" />
			</fileset>
		</cpd>  
	</target>
	

	
	<!--
		Release script  
	-->
	
	<target name="release" depends="package,deploy,remove"/>
	
	
	

</project>
