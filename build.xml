<?xml version="1.0"?>
<!--
Correcteur terminologique - éradication des anglicismes.
Copyright (C) 2006 Linagora SA - Manuel Odesser modesser@linagora.com
Copyright (C) 2009 Atos Origin - Philippe PRADOS, Romain PELISSE

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
-->
<project name="terminologie" default="package">
	<description>This ant file is only to package the AnglicismeThesaurus component</description>
	
	<!--
**********************************************************************************************************	    
	    Warning, those variable are SYSTEM SPECIFIC, you should set them properly
	    before making any attempt to use run this Ant script.
**********************************************************************************************************
	    -->


	<!-- Regular project property -->
	<property name="out.path" 			value="bin/ant" 					/>
	<!-- Deuxième chiffre à modifier lors de la mise à jour de la base franceterm. Dernier lors de la correction d'un bug -->
	<property name="version" 			value="1.0.2" 						/>
	<property name="src.java"			value="src/java"					/>
	<property name="src.test"			value="src/tests"					/>
	<property name="src.xsl"			value="src/xsl"						/>
	<property name="src.idl"			value="src/idl"						/>
	<property name="src.starbasic"		value="src/starbasic/terminologie"	/>

	<property name="target"						value="target"							/>
	<property name="target.generated"			value="${target}/generated"				/>
	<property name="target.generated.types"		value="${target.generated}/types.rdb"	/>
	<property name="target.generated.classes"	value="${target.generated}/classes"		/>
	<property name="target.generated.urd"		value="${target.generated}/urd/"		/>

	<property name="classes"			value="${target}/classes"				/>
	<property name="package"			value="${target}/package"				/>	
	<property name="dict"			value="data"	/>
	<property name="dict.xml"		value="${target}/terminologie.xml"		/>
	<property name="dict.exclusion"		value="liste.exclusion.txt"	/>
	<property name="dict.exclusion.xml"	value="${target}/exclusions.xml"/>
	<property name="dict.inclusion"		value="liste.inclusion.txt"	/>
	<property name="dict.inclusion.xml"	value="${target}/inclusions.xml"/>

	<property name="tests"			value="src/test"/>
	<property name="tests.classes"		value="${target}/tests/classes"	/>
	<property name="tests.reports"		value="${target}/reports/test"	/>
	<property name="tests.coverage"		value="${target}/coverage/"	/>
	<property name="REPO"			value="/home/rpelisse/.m2/repository"	/>
	<property name="rulesets"		value="resources/pmd.xml"/>
	
	<!-- Project classpath : contains anything required to build the plugin -->

	<!-- Targets -->

	<target name="clean"
		description="Clean working directory">
		<delete dir="${target}" />
	</target>	
	
	<target name="init" 
		description="Set up working directory"
		depends="hudson-init,dev-init">
		
		<!-- properties specific to OOo -->
		<property name="OOo_SDK"        value="${OOo_HOME}/basis-link/"/>
		<property name="unopkg.exe"     value="${OOo_SDK}/ure-link/bin/uno.bin"/>
		<property name="project.lib"    value="${OOo_SDK}/program/classes/"/>
		<property name="idlc.exe"	value="${OOo_HOME}/basis-link/sdk/bin/idlc"/>
		<property name="remerge.exe"	value="${OOo_URE}/bin/regmerge"/>
		<property name="javamaker.exe"	value="${OOo_HOME}/basis-link/sdk/bin/javamaker"/>
		  
		<path id="project.classpath">
			<fileset dir="${project.lib}">
				<include name="*.jar"/>
			</fileset>
			<fileset dir="${plugin.lib}">
				<include name="*.jar"/>
			</fileset>
			<pathelement path="${target.generated.classes}"/>
		</path>
		
		<mkdir dir="${basedir}/${target}"/>
	</target>

	<target name="hudson-init" if="hudson.build">
		<property name="OOo_HOME"	value="/opt/openoffice.org3/"/>
		<property name="OOo_URE"	value="/opt/openoffice.org/ure/"/>
		<property name="plugin.lib"	value="${OOo_URE}/share/java/openoffice"/>
	</target>
	
	<target name="dev-init" unless="hudson.build">
		<property file="build.properties"/>
	</target>
	
	<target name="idl">
		
		<mkdir dir="${target.generated}"/>
		<echo>
		idl compilation:
		(Warning, compile only specified idl classes !)
		</echo>
		<!-- as using a wildcard in a file/arg statement does not seems
			to work... -->
		<exec executable="${idlc.exe}"
		      failonerror="yes"
		      failifexecutionfails="yes">
			<arg value="-I${OOo_HOME}/basis-link/sdk/idl/;${src.idl}"/>
			<arg value="-O"/>
			<arg file="${target.generated.urd}"/>
			<arg file="${src.idl}/org/atosorigin/ctOO/CtOO3.idl"/>
			<arg file="${src.idl}/org/atosorigin/ctOO/Result.idl"/>
			<arg file="${src.idl}/org/atosorigin/ctOO/XCtOO3.idl"/>
		</exec>
		<echo>
		registry creation 'types.rdb'
		</echo>
	
		<exec executable="${remerge.exe}"
		      failonerror="yes"
		      failifexecutionfails="yes">
		    <env key="LD_LIBRARY_PATH" path="${OOo_HOME}/ure/lib/"/>  
		    <arg file="${target.generated.types}"/>
		    <arg value="/UCR"/>
		    <arg file="${target.generated.urd}/CtOO3.urd"/>
		    <arg file="${target.generated.urd}/Result.urd"/>
		    <arg file="${target.generated.urd}/XCtOO3.urd"/>	      
		</exec>
	
		 <echo>Classes generation</echo>	
		 <exec executable="${javamaker.exe}"
		       failonerror="yes"
		       failifexecutionfails="yes">
		       <arg value="-BUCR"/>
		       <arg value="-nD"/>
		       <arg value="-Torg.atosorigin.ctOO.*"/> 
		       <arg value="-O"/> 
		       <arg file="${target.generated.classes}"/>
               <arg file="${target.generated.types}"/>
		       <arg file="${OOo_URE}/share/misc/types.rdb"/>
		 </exec>
	</target>
	
	<target name="compile" 
		depends="init,idl"
		description="Compile project source code">

		<!-- fixme: some classes are not generated by the previous task -->
		<mkdir dir="${classes}"/>
		<javac srcdir="${src.java}:${target.generated.classes}"
		       destdir="${classes}"
		       target="1.5"
		       debug="false">
		       <classpath refid="project.classpath"/>
		</javac>
	</target>
	
	<target name="generate-exclusion-list">
		<property name="working.copy"	value="${target}/${dict.exclusion}"/>
		
		<delete file="${working.copy}"/>
		<copy file="resources/${dict.exclusion}" tofile="${working.copy}"/>
		<replaceregexp byline="true">
			<regexp pattern="(^[^$].*)"/>
			<substitution expression="   &lt;exclude&gt;\1&lt;/exclude&gt;"/>
			<fileset dir="." includes ="${working.copy}"/>
		 </replaceregexp>

		<replaceregexp byline="true">
			 <regexp pattern="^.*====FIN(.*)"/>
			 <substitution expression="&lt;/excludes&gt;"/>
			 <fileset dir="." includes ="${working.copy}"/>
		</replaceregexp>
		 
		<replaceregexp byline="true">
			<regexp pattern="^.*====DEBUT(.*)"/>
			<substitution expression="&lt;!-- This file is generated automaticly, do not edit --&gt;&lt;excludes&gt;"/>
			<fileset dir="." includes ="${working.copy}"/>
		</replaceregexp>	
		<copy file="${working.copy}" tofile="${dict.exclusion.xml}"/>
	</target>
	
	<target name="generate-inclusion-list">
		<property name="working.copy"	value="${target}/${dict.inclusion}"/>
		<delete file="${working.copy}"/>
		
		<copy file="resources/${dict.inclusion}" tofile="${working.copy}"/>
		<replaceregexp byline="true">
			<regexp pattern="(^[^$].*)=(.*)"/>
			<substitution expression="   &lt;include anchor='\2'&gt;\1&lt;/include&gt;"/>
			<fileset dir="." includes ="${working.copy}"/>
		 </replaceregexp>

		<replaceregexp byline="true">
			 <regexp pattern="^.*====FIN(.*)"/>
			 <substitution expression="&lt;/includes&gt;"/>
			 <fileset dir="." includes ="${working.copy}"/>
		</replaceregexp>
		 
		<replaceregexp byline="true">
			<regexp pattern="^.*====DEBUT(.*)"/>
			<substitution expression="&lt;!-- This file is generated automaticly, do not edit --&gt;&lt;includes&gt;"/>
			<fileset dir="." includes ="${working.copy}"/>
		</replaceregexp>	
		<copy file="${working.copy}" tofile="${dict.inclusion.xml}"/>
	</target>	
	
	
	
	<!-- Generating data file from FranceTerme extraction -->
	
	<target name="generate-xml-file" depends="generate-exclusion-list,generate-inclusion-list">
		<!-- FranceTerme syntax is simplified and data reorganized to
		     be "anglicism" driven... -->
		<property name="out" value="${target}/franceterme-adapted.xml"/>
		<xslt 	in="resources/FranceTerme.xml"
			style="src/xsl/franceterme-adaptation.xsl"
			out="${out}">
		</xslt>
	
		<!-- Let's remove homographic terms (such as 'diffusion', spelled equally in french and in english)-->
		<property name="database-without-homographies"
			  value="${target}/database-without-homographies.xml"/>
		<xslt 	in="${out}"
			style="src/xsl/remove-homographies.xsl"
			out="${out}.tmp">
		</xslt>	
		<copy file="${out}.tmp" tofile="${out}"/>
	
		<!-- We have double entry in this file let agregate their metadata (mostly domain) -->
		<property name="inconsistent-database"	value="${target}/agregate-database.xml"/>
		<xslt 	in="${out}"
			style="src/xsl/agregate-domain.xsl"
			out="${inconsistent-database}">
			<param name="ref-filename"	expression="${basedir}/${out}"/>
		</xslt>

		<!-- First transformation create double entry, now we have to factorize it -->
		<property name="basic-database"	value="${target}/basic-database.xml"/>
		<xslt 	in="${inconsistent-database}"
			style="src/xsl/regroup-same-anglicism.xsl"
			out="${basic-database}">
			<param name="ref-file" 		expression="${basedir}/${inconsistent-database}"/>
		</xslt>
		
		<!-- How many entries have we factorized ? -->
		<property name="dev.null"	value="${target}/empty.xml"/>
		<xslt 	in="${basic-database}"
			style="src/xsl/nb-anglicisms.xsl"
			out="${dev.null}">
		</xslt>
				
		<!-- Let's remove homographic terms (such as 'diffusion', spelled equally in french and in english)-->
		<property name="database-without-homographies"
			  value="${target}/database-without-homographies.xml"/>
		<xslt 	in="${basic-database}"
			style="src/xsl/remove-homographies.xsl"
			out="${database-without-homographies}.full">
		</xslt>	
		
		<!-- How many entries have we remove for homographic reasons ? -->
		<xslt 	in="${database-without-homographies}.full"
			style="src/xsl/nb-anglicisms.xsl"
			out="${dev.null}">
		</xslt>

		<!-- Ok, now we remove term that match a french word, based on a exclusion list -->
		<xslt 	in="${database-without-homographies}.full"
			style="src/xsl/terms-exclusion.xsl"
			out="${database-without-homographies}">
			<param name="exclusion-file" expression="${basedir}/${dict.exclusion.xml}"/>
		</xslt>

		<!-- How many entries have we left now ? -->
		<xslt 	in="${database-without-homographies}"
			style="src/xsl/nb-anglicisms.xsl"
			out="${dev.null}">
		</xslt>
		
		<!-- Ok, now we add new terms that match a french word, based on a inclusion list --> 
		<xslt 	in="${database-without-homographies}"
			style="src/xsl/terms-inclusion.xsl"
			out="${database-without-homographies}.inclusions-added.xml">
			<param name="inclusion-file" expression="${basedir}/${dict.inclusion.xml}"/>
			<param name="ref-filename"   expression="${basedir}/${database-without-homographies}"/>
		</xslt>
		<copy file="${database-without-homographies}.inclusions-added.xml" 
		      tofile="${database-without-homographies}"/>
		<!-- How many entries have we left now ? -->
		<xslt 	in="${database-without-homographies}"
			style="src/xsl/nb-anglicisms.xsl"
			out="${dev.null}">
		</xslt>
			
		<!-- and then we factorize the domains of the remaining entries -->
		<xslt 	in="${database-without-homographies}"
			style="src/xsl/factorize-domain.xsl"
			out="${database-without-homographies}.factorized">
		</xslt>
		 
		<!-- How many entries have we left now ? -->
		<xslt 	in="${database-without-homographies}"
			style="src/xsl/nb-anglicisms.xsl"
			out="${dev.null}">
		</xslt>

		<!-- Yet one more step: sort the terms list in each domain -->
		<xslt   in="${database-without-homographies}.factorized"
			style="src/xsl/sort-term-list.xsl"
			out="${dict.xml}"/>
			
		<xslt   in="${dict.xml}"
                        style="src/xsl/log-display.xsl"
                        out="${target}/rapport-execution.html"/>
		<!--
			Here we are done for the extension part, we still have double entries
			inside a <synmonymes> element, but the XMLDictionnary Handler in the
			Java component will take care of this.
		-->
	</target>

	<target name="database-to-language-tools">
		<!--
			The following treatment are to generate the appropriate file for
			OpenOffice.org's Language Tools project.

			Note that the next operation is information destructive as, in order
			to remove the double entries, we must sort the <synonyme> elements
			which destroy the natural order respected up until now.
		-->

		<!-- Synonyms may have some double entry in a domain... let's remove them. -->
		<xslt 	in="${database-without-homographies}.factorized"
			style="src/xsl/remove-double-synonym-entry.xsl"
			out="${database-without-homographies}.nodoubleentries">
		</xslt>

		<!-- Generate proper datafile for LT. -->
		<xslt 	in="${database-without-homographies}.nodoubleentries"
			style="src/xsl/to-LangageTool.xsl"
			out="${target}/partial-grammar.xml">
		</xslt>

		<move file="${database-without-homographies}.nodoubleentries" tofile="${dict.xml}"/>		
	</target>
	
	<!-- Assembling the jar file -->
	
	<target name="jar" 
		description="Create jar file"
		depends="compile,generate-xml-file,version">
		<jar 	basedir="${classes}" 
		     	includes="**/*" 
			destfile="${target}/${ant.project.name}-${version}.jar">
			<manifest>
				<attribute 	name="RegistrationClassName" 		
						 value="org.atosorigin.ctOO.comp.CtOO3Impl" />
			</manifest>
			<fileset dir="${target.generated.classes}" includes="**/*.class"/>
			<fileset dir="${target}">
				<include name="terminologie.xml"/>
			</fileset>
		</jar>
		
	</target>
	
	<!-- Editing file with the version number -->
	<target name="version">
		<delete dir="${target}/META-INF"/>
		<mkdir dir="${target}/META-INF"/>
		<copy file="${basedir}/resources/META-INF/manifest.xml" todir="${target}/META-INF/"/>
		<replace file="${target}/META-INF/manifest.xml" token="@@VERSION@@" value="${version}"/>
	</target>

	<!-- Building the pkg file for OOo -->
	<target name="package" 
		depends="jar,version" 
		description="Package application for OOo">
	
		<copy todir="${target}/${ant.project.name}/">
			<fileset dir="${src.starbasic}"/>
		</copy>

		<mkdir  dir="${package}"/> <!-- we just need an empty directory as a basedir -->
		<zip 	destfile="${target}/${ant.project.name}-${version}.oxt"
		     	basedir="${package}">
			<fileset dir="${target}/"		includes="META-INF/manifest.xml"	/>
			<fileset dir="${basedir}" 		includes="README"			/>
			<fileset dir="${basedir}" 		includes="COPYING"			/>
			<fileset dir="${basedir}"		includes="resources/ChangeLog"		/>
			<fileset dir="${target}"		includes="terminologie/**/*"		/>
			<fileset dir="target/generated"		includes="types.rdb"			/> 
			<fileset dir="${basedir}/resources"	includes="images/"			/>
			<fileset dir="${basedir}/resources"    	includes="Addons.xcu"   		/>
			<fileset dir="${basedir}/resources"     includes="Events.xcu"   		/> 
			<fileset dir="${basedir}/resources"     includes="WriterWindowState.xcu"   	/> 
			<fileset dir="${target}"		includes="${ant.project.name}-${version}.jar"	/>
		</zip>
		<delete dir="${package}" />
	
		<delete file="${target}/META-INF/manifest.xml"/>
		<delete dir="${package}" />

	</target>

	<!-- Unit test execution -->
	<target name="compile-test">
		<mkdir dir="${tests.classes}"/>
		<javac  srcdir="${tests}"
			destdir="${tests.classes}">
			<classpath refid="project.classpath" />
			<classpath location="${classes}" />
		</javac>
	</target>
	
	<target name="test" 
		depends="compile,compile-test,generate-xml-file"
		description="Run project unit test">
		<mkdir dir="${tests.reports}"/>
		<junit  fork="yes"
			dir="${basedir}"
			failureProperty="test.failed">
			<!-- JUnit does requies project dependancies -->
			<classpath refid="project.classpath"/>
			<classpath location="${classes}" />
			<classpath location="${tests.classes}" />
			<!-- Old database (Criter) -->
			<classpath location="${dict}" />
			<!-- New one -->
			<classpath location="${target}"/>
			<!-- OOo3 default setting allow only 100Mo for JVM, so we check extension does consume more than 50Mo -->
			<jvmarg value="-Xms5M"/>
			<jvmarg value="-Xmx40M"/>
			<!-- XML output for result    -->
			<formatter type="xml" />

			<batchtest todir="${tests.reports}">
				<fileset dir="${tests}"
					 includes="**/*.java"
					 excludes="**/Abstract*.java"/>
			</batchtest>
		</junit>
	        <junitreport todir="${tests.reports}">
			<fileset dir="${tests.reports}">
				<include name="**/TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${tests.reports}/html"/>
		</junitreport>
        </target>
	
	<!-- OOo integration test -->
	
	<target name="deploy">
		<exec executable="${unopkg.exe}"
		      failonerror="yes"
		      failifexecutionfails="yes">
			<arg value="add"/>
			<arg value="-v"/>
			<arg file="${target}/${ant.project.name}-${version}.oxt"/>
		</exec>
	</target>
	
	<target name="undeploy">
		<exec executable="${unopkg.exe}"
		      failonerror="yes"
		      failifexecutionfails="yes">
			<arg value="remove"/>
			<arg value="-v"/>
			<arg value="${ant.project.name}-${version}.oxt"/>
		</exec>
	</target>

	<!-- 
	     QA tools
	-->
	     
	
	<target name="quality" depends="pmd"  description="Java Code Quality Control"/>
	
	<target name="pmd" depends="init">
		<path id="pmd.classpath">
			<pathelement location="${REPO}/pmd/pmd/4.2.4/pmd-4.2.4.jar" />
			<pathelement location="${REPO}/asm/asm/3.1/asm-3.1.jar" />
			<pathelement location="${REPO}/backport-util-concurrent/backport-util-concurrent/3.1/backport-util-concurrent-3.1.jar"/>
			<pathelement location="${REPO}/jaxen/jaxen/1.1.1/jaxen-1.1.1.jar" />
			<pathelement location="${rulesets}"/>
		</path>
		
		<taskdef 	name="pmd"
				classname="net.sourceforge.pmd.ant.PMDTask">
			<classpath refid="pmd.classpath" />
		</taskdef>
		
		<!-- PMD -->
		<pmd 	targetjdk="1.5"
			shortFilenames="true"
			rulesetfiles="${rulesets}">
			<formatter 	type="xml"
					toFile="${target}/pmd.xml"
					linePrefix=".line" />
			<formatter 	type="html"
					toFile="${target}/pmd.html"/>
			<fileset 	dir="${src.java}">
				<include name="**/*.java" />
			</fileset>
		</pmd>
		
		<xslt 	in="${target}/pmd.xml" 
			style="src/xsl/pmd-nicerhtml.xsl" 
			out="${target}/pmd.html" />
		<!-- Looking for cut'n'paste code -->
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask">
			<classpath refid="pmd.classpath" />
		</taskdef>
		
		<cpd 	minimumTokenCount="10"
			outputFile="${target}/cpd.xml">
			<fileset 	dir="${src.java}">
				<include name="**/*.java" />
			</fileset>
		</cpd>  
	</target>
	
	
	<!-- TODO: this is broken, need to have a working emma_ant jar ! -->
	<target name="tests-coverage">

		<!-- Adding EmmaTask to Ant -->
		<path id="emma.classpath">
			<pathelement location="${REPO}/emma/emma/emma-2.0.5312.jar" />
			<pathelement location="${REPO}/emma/emma_ant/2.0.5312/emma_ant-2.0.5312.jar" />
		</path>
		
		<taskdef name="emma" 
			 classname="com.vladium.emma.emmaTask">
			<classpath refid="emma.classpath" />
		</taskdef>
		
		<taskdef name="emmajava" 
			 classname="com.vladium.emma.emmajavaTask">
			<classpath refid="emma.classpath" />
		</taskdef>
		
		<echo>Instrumenting project classes ...</echo>
		<emma 	enabled="true" >
			<instr instrpath="${classes}"
			       destdir="${classes}"
			       metadatafile="${tests.coverage}/metadata.emma"
			       mode="overwrite">
			</instr>
		</emma>
		
		<echo>Running instrumented tests classes ...</echo>
		<emmajava 	enabled="false" 
				fullmetadata="true">
			<classpath>
				<path refid="emma.classpath"/>
				<pathelement location="${REPO}/junit/junit/4.4/junit-4.4.jar" />
				<pathelement location="${REPO}/jdom/jdom/1.0/jdom-1.0.jar" />
				<pathelement location="${REPO}/log4j/log4j/1.2.9/log4j-1.2.9.jar" />
				<pathelement path="${classes}"/>
			</classpath>
			
		</emmajava>
		
		<!-- Genere les rapports -->
		<echo>Generating Emma reports ...</echo>
		<emma 	enabled="true" >
			<report sourcepath="${basedir}/src/java"
				sort="+name"
				metrics="method:70,block:80,line:80,class:100">
				<fileset dir="${tests.coverage}" >
					<include name="**/*.emma" />
					<include name="*.ec" />
				</fileset>
				<xml 	outfile="${tests.coverage}/coverage.xml" 
				     	depth="method" />
				<html 	outfile="${tests.coverage}/coverage.html"
				      	depth="method" 
					columns="name,class,method,block,line" />
			</report>
		</emma>
			
	</target>

	<!--
		Release script  
	-->
	
	<target name="release" depends="package,undeploy,deploy"/>
	
	
	

</project>
