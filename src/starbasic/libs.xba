<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="libs" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit
REM
REM Data for the service layer
REM
Private maxwords as Integer
Private parser as Object

REM data for the functionnality part
Private results as Object &apos; Array of results from the last search for foreign term
Private currentResult as Integer &apos; index of the current row in the results table
Private cursor as Object &apos; Cursor on the current selection
Private ignoresTerms as Integer &apos; TODO:index dans le tbl (le &quot;run&quot;)
Private tab as Object &apos; TODO:ingoreALl liste de TERM

REM 
REM data for the HMI layer
REM
Private Const dialogueLibraryName = &quot;terminologie&quot;
Private Const sDialogName = &quot;dialogues&quot;
Private Const REMPLACEMENT_FIELD_NAME = &quot;remplacement&quot;
Private mainDialog as Object


REM ****************************************************************************************
REM		UNIT TEST PART
REM 



Sub Main
	BasicLibraries.LoadLibrary(&quot;XrayTool&quot;)
	CheckSelection()
	Dim part as Object
&apos;	part = selectPart( ThisComponent.currentController.ViewCursor.Text,2,5)	
&apos;	xray( part)

	&apos;If isNull(  getTerminologieService() ) Then
	&apos;	msgbox(&quot;failed&quot;)
	&apos;End If

	Dim results as Object
	Dim i as integer
	Dim selectCursor as Object
	Dim curs As Object
	Dim visualCursor As Object
	Dim currentText As Object
	Dim selectionCursor As Object
	
	parser = createUnoService( &quot;org.atosorigin.ctOO.comp.CtOO3&quot; )
	&apos;FIXME: this should be far more better : maxwords=parser.maxwords
	maxwords = 7 
	
	visualCursor = ThisComponent.currentController.ViewCursor
	currentText = visualCursor.Text
	selectionCursor = currentText.createTextCursorByRange(visualCursor)
	msgbox( selectionCursor.String)
	results = parser.search(selectionCursor.String)
	part =  selectPartOfText(ThisComponent.currentController.ViewCursor,results(0).start,results(0).stop)
	msgbox(part.String)
&apos;	ShowDialog(results(0).foreignTerm.domaines,&quot;web&quot;)
	selectCursor =  ThisComponent.currentController.ViewCursor
	
End Sub

REM TO DELETE

REM Sub addAutomaticLaunch( toAddStr , addonKey, filePath )
REM End Sub
REM Sub rechercheTerminologique()                                                                                                                                             
REM End Sub    


REM
REM 
REM ****************************************************************************************



REM **********************************************************************************************
REM **********************************************************************************************
REM 	FUNCTIONNALITY METHODS
REM **********************************************************************************************
REM **********************************************************************************************

REM Select part of the  
REM  Selection d&apos;une portion limité à n mots avant et après la selection, 
&apos; bornée au paragraphe courant.
Function selectPartOfText(cursor as Object,start as Integer,maxwords as Integer) as Object	
	Dim selectionCursor as Object
	
	selectionCursor = cursor.Text.createTextCursorByRange(cursor)
	selectionCursor.collapseToStart()
	selectionCursor.goRight(start,false)
	selectionCursor.goRight(maxwords + 1,true) 
	selectPartOfText = selectionCursor
End Function

REM
REM Retrieve and build the Uno Service associated with this plugin, if and
REM only if the service as not already be fetched.
REM
REM @author Romain PELISSE romain.pelisse@atosorigin.com
REM
Function getTerminologieService 
	if  isNull(parser) then
		parser = createUnoService( &quot;org.atosorigin.ctOO.comp.CtOO3&quot; )
	end if
	getTerminologieService = parser
End Function

REM
REM	This routine implements the &quot;check my selection&quot; functionnality.
REM
REM @author Romain PELISSE romain.pelisse@atosorigin.com
REM
REM                                                                                                                                                                  
Sub CheckSelection()                                                                                                                                                      
	Dim visualCursor as Object
	Dim currentText as Object
	Dim selectedText as String
	
	visualCursor = ThisComponent.currentController.ViewCursor
	currentText = visualCursor.Text
	&apos; cursor will keep all text selected
	cursor = currentText.createTextCursorByRange(visualCursor)
	selectedText = cursor.String
	If NOT isNull(selectedText) AND selectedText &lt;&gt; &quot;&quot; Then
		Dim serviceTerminologie as Object
		serviceTerminologie = getTerminologieService
		results = serviceTerminologie.search(selectedText)

		If ( UBound(results) &gt;= 0 ) Then
			currentResult = 0
			ShowDialog(results(currentResult).foreignTerm.domaines,selectPartOfText(cursor,results(currentResult).start,results(currentResult).stop).getString()) REM FIXME: Add foreign term to results structure
		End If
	end if
End Sub     

REM TODO: not really used for the moment...
&apos; Selection d&apos;une portion limité à n mots avant et après la selection, 
&apos; bornée au paragraphe courant.
Function selectPart(theText as Object,maxwords as Integer) as Object
	Dim portionCursor as Object 
	Dim startWordCursor as Object
	Dim endWordCursor as Object
	Dim paragraphCursor as Object
	Dim nbCharacter as integer
	
	startWordCursor = theText.createTextCursorByRange(ThisComponent.currentController.viewCursor)
	endWordCursor = theText.createTextCursorByRange(ThisComponent.currentController.viewCursor)
	paragraphCursor = theText.createTextCursorByRange(ThisComponent.currentController.viewCursor)
	portionCursor = theText.createTextCursorByRange(ThisComponent.currentController.viewCursor)
	
	paragraphCursor.gotoStartOfParagraph(false)
	paragraphCursor.gotoEndOfParagraph(true)
	
	startWordCursor.gotoStartOfWord(false)
	for nbCharacter = 1 to maxwords
		startWordCursor.gotoPreviousWord(false)
	next
	for nbCharacter = 1 to maxwords - 1
		endWordCursor.gotoNextWord(true) 
	next
	endWordCursor.gotoEndOfWord(false)
	
	portionCursor = theText.createTextCursor()
	if (theText.compareRegionStarts(startWordCursor,paragraphCursor) &gt; 0) then
		portionCursor.gotoRange(endWordCursor.end,true)
	else
		portionCursor.gotoRange(paragraphCursor.end,true)
	end if
	selectPart=portionCursor
End Function

&apos;
&apos;	Vérifie l&apos;intégralité du document.

&apos; TODO: gérer equalement les tableaux, et autres textes
&apos;
Sub checkDocument()
 Dim listParagraph as Object
 listParagraph = theDocument.text.createEnumeration()
 do while listParagraph.hasMoreElements
  elementText = listParagraph.nextElement
  if (elementText.supportsService(&quot;com.sun.star.text.Paragraph&quot;)) then
		parser = getTerminologieService 
  end if
 loop
End sub
                                                                                                                                  
Sub ActivateReplaceButton()                                                                                                                                               
End Sub                                                                                                                                                                   
Sub KeyPressedInDialog(Event As Object)                                                                                                                                   
End Sub

REM 
REM This routine implements the ignore functionnality. Basicly, it
REM just move to the next word
Sub Ignore()
	REM We have to keep an record of ignore term for this run
	
	REM first we close the dialog
	DialogClose()
	currentResult = currentResult + 1
	REM if there is still results to be dealt with...
	If (currentResult &lt; UBound(results) ) Then		
		currentResult = currentResult + 1
		ShowDialog(results(currentResult).foreignTerm.domaines,selectPartOfText(cursor,results(currentResult).start,results(currentResult).stop).getString())
	Else
		REM otherwise, we&apos;re done here
		currentResult = -1
	End If
End Sub

REM
REM	This routine replace a word, inside a target&apos;s text, by the selected
REM	term.
REM
REM @author Romain PELISSE romain.pelisse@atosorigin.com
REM
REM    
Sub ReplaceAnglicisme()
	Dim result as Object
	Dim replaceCursor as Object
	
	result = results(currentResult)
	replaceCursor = selectPartOfText(cursor,result.start,result.stop)
	Dim remplacement as String
	
	
  	REM Next lines to move into an other routine as it 
  	REM belong to the IHM layer
  	REM ...
  	Dim controlModel as Object
  	controlModel = mainDialog.getModel().getByName(&quot;remplacement&quot;)
	remplacement = controlModel.getPropertyValue(&quot;Text&quot;)
	REM ...
	REM
	
	REM NOTE: We should never have an empty remplacement...
	&apos; If remplacement &lt;&gt; &quot;&quot; Then
	replaceCursor.String = remplacement
	DialogClose()
	REM We modify the target&apos;s text, we need to recheck it
	CheckSelection()
	&apos;End If	
End Sub

Sub ReplaceAllAnglicisme()
End Sub
Sub RemplaceInSelection(replace as Object)
End Sub
REM
REM Ignore un anglicisme  sélectionné par l&apos;utilisateur 
REM	jusqu&apos;à la fin de la vérification.
REM
REM @author Romain PELISSE, romain.pelisse@atosorigin.com
REM
Sub IgnoreAll()	 
	Dim foreignTerm as String
    REM TODO: move to an appropriate IHM method
	controlModel = mainDialog.getModel().getByName(&quot;anglicisme&quot;)
	foreignTerm = oControlModel.getPropertyValue(&quot;Text&quot;)
	REM 
	&apos; Resize ignore term array
	NbTermIgnorer = NbTermIgnorer + 1
	ReDim IgnoreTermArray(NbTermIgnorer)
	&apos; Change casse to lower	
	anglicisme = SetCasse(CasseLower,anglicisme)
	&apos; Add to array
	IgnoreTermArray(NbTermIgnorer) = anglicisme
	oDialog.endExecute()
End Sub
Sub SetupKeyHandler                                                                                                                                                       
End Sub                                                                                                                                                                   
Sub RemoveKeyHandler                                                                                                                                                      
End Sub                                                                                                                                                                   
Sub addHook                                                                                                                                                               
End Sub                                                                                                                                                                   
Sub removeHook                                                                                                                                                            
End Sub                                                                                                                                                                   
Sub KeyHandler_disposing                                                                                                                                                  
End Sub                                                                                                                                                                   
Sub KeyHandler_keyReleased(oKeyEvent As New com.sun.star.awt.KeyHandler) As Boolean                                                                                       
End Sub                                                                                                                                                                   


REM
REM Open the appropriate URL from the mainDialog
REM
REM @author Laurent Godard http://www.indesko.com/telechargements/ooowikipedia
REM 
Sub OpenExternalDatasourceURL()
	on error resume next
	Dim objlancer
	Dim handleErrors
	Dim adress as String
	Dim ControlModel As Object
	Dim term As String

	&apos; retrieving the foreign term value
	ControlModel =  oDialog.getModel().getByName(REMPLACEMENT_FIELD_NAME)
	&apos; FUTURE: When FranceTerme handle properly accentued character passed by Get
	&apos; this next call should be removed
	term = replaceAccentedCharacter( ControlModel.getPropertyValue(&quot;Text&quot;) )
	&apos; building the appropriate URL
	adress = ConvertToURL(&quot;http://franceterme.culture.fr/FranceTerme/recherche.html?TERME=&quot; + term)
	&apos; calling the external service
	handleErrors = com.sun.star.system.SystemShellExecuteFlags.NO_SYSTEM_ERROR_MESSAGE &apos;=1 or DEFAULTS=0
	objlancer = CreateUnoService(&quot;com.sun.star.system.SystemShellExecute&quot;)
	objlancer.execute(adresse, &quot;&quot;, handleErrors)
End Sub

REM **********************************************************************************************
REM **********************************************************************************************
REM 	IHM METHODS
REM **********************************************************************************************
REM **********************************************************************************************
                                                                                                                                   
REM
REM	This routine display the main dialog. 
REM
REM @author Romain PELISSE romain.pelisse@atosorigin.com
REM
REM	@arg : an identified foreignTerm with its metadata
REM
Sub ShowDialog( domains as Object,term as String) &apos; FIXME: add term to struct, remove it from the args
    Dim DialogModel As Object
    Dim ControlModel As Object
		
	&apos; Building the interface
	DialogConstructor()
    &apos; ... et on peut la remplir avec les valeurs données par le moteur terminologique.
    DialogModel = mainDialog.getModel()
    ControlModel = DialogModel.getByName(&quot;anglicisme&quot;)
    ControlModel.setPropertyValue(&quot;Text&quot;, term)
    ControlModel = DialogModel.getByName(&quot;Domaines&quot;)
	&apos; Building the domains list from results
	Dim domainsList(UBound(domains) - LBound(domains)) As String
	Dim indexDomain As Integer	
	for indexDomain = LBound(domains) to UBound(domains)
		domainsList(indexDomain) = domains(indexDomain).name
	next	
	ControlModel.StringItemList = domainsList()
	&apos; Preselection of the first item
	definePreselectedItem(ControlModel)
	UpdateTermsList(domains)
	&apos; affiche la boîte de dialogue
    mainDialog.execute()
End Sub                                                                                                                                                                   

REM
REM Handy routine to preselect the appropriate term of any list box
REM TODO: Is this necessary ? Aren&apos;t there any other (better) way to do this ?
REM
Sub definePreselectedItem(ControlModel as Object) &apos; FUTURE: add this param &quot;index as Integer&apos;
	Dim preselectionItems(1) As Integer
	preselectionItems(0) = 0
	ControlModel.SelectedItems = preselectionItems()	
End Sub

REM
REM Retrieve dialog descriptor and build it
REM
REM @author Romain PELISSE romain.pelisse@atosorigin.com
REM @author Manuel Odesser modesser@linagora.com
REM
Sub DialogConstructor
    Dim oLibContainer As Object
    Dim oInputStreamProvider As Object
    Dim oLib As Object
    &apos; retrieving from lib, the dialog descriptor
    DialogLibraries.loadLibrary(dialogueLibraryName)
    &apos; Let&apos;s build the dialog box
    oInputStreamProvider = DialogLibraries.getByName(dialogueLibraryName).getByName(sDialogName)
    mainDialog = CreateUnoDialog(oInputStreamProvider)
End Sub

REM
REM Update synonyms list on the main dialog
REM 
REM @author Manuel Odesser modesser@linagora.com
REM	@author Romain Pelisse romain.pelisse@atosorigin.com
REM
Sub UpdateTermsList(domains as Object)
    Dim DialogModel As Object
    Dim ControlModel As Object
    Dim meaning as String
	Dim synonyms As Variant

	If IsNull(mainDialog) OR isNull(domains) Then
		&apos; Should never happens...
		Exit Sub
	End If
	&apos; Getting back the selected &apos;domain&apos;
    ControlModel = mainDialog.getModel().getByName(&quot;Domaines&quot;)
    on error goto noSelectedMeaning
	meaning = ControlModel.StringItemList(ControlModel.SelectedItems(0))

noSelectedMeaningNext:
    on error resume next
    &apos; updating the list
    ControlModel = mainDialog.getModel().getByName(&quot;Termes&quot;)
    Dim indexDomain as Integer
	For indexDomain = LBound(domains) To UBound(domains)
		&apos; Does this meaning match with the one we&apos;re looking for ? 
		If meaning = domains(indexDomain).name Then
			ControlModel.StringItemList = domains(indexDomain).synonymes
			Exit For
		EndIf
	Next
	definePreselectedItem(ControlModel)
	UpdateSelectedTerm
	Exit Sub

noSelectedMeaning:
	meaning = 0
	goto noSelectedMeaningNext

End Sub

REM
REM Display a text box
REM
REM @author Manuel Odesser modesser@linagora.com
REM @author Romain Pelisse romain.pelisse@atosorigin.com
REM
Sub ShowTextDialog(dialog as String)
	TextDialogConstructor(dialog).execute()
End Sub

REM
REM Display the help text
REM
REM	@author Romain Pelisse romain.pelisse@atosorigin.com
REM
Sub Help
	ShowTextDialog(&quot;help_text&quot;)
End Sub

REM
REM Display the about text
REM
REM	@author Romain Pelisse romain.pelisse@atosorigin.com
REM
Sub About
	ShowTextDialog(&quot;help_dialog&quot;)
End Sub


REM
REM Buid a text dialog
REM
REM @author Manuel Odesser modesser@linagora.com
REM	@author Roamin Pelisse romain.pelisse@atosorigin.com
REM 
Function TextDialogConstructor(sDialogName as String)
    Dim inputStreamProvider As Object
    Dim dialog As Object
   
    &apos; récupération de la librairie dans laquelle est définie la boîte
    DialogLibraries.loadLibrary(dialogueLibraryName)
    dialog = DialogLibraries.getByName(dialogueLibraryName)
    &apos; crée la boîte proprement dite
    TextDialogConstructor = CreateUnoDialog(dialog.getByName(sDialogName))
End Function
                                                                                                                                                              
REM
REM Close the mainDialog box
REM
REM @author Manuel Odesser modesser@linagora.com
REM
Sub DialogClose
	mainDialog.endExecute()
End Sub                                                                                                                                                                  
                                                                                                                                                                   
REM Update the displayed term with the appropriate value
REM
REM @author Manuel Odesser modesser@linagora.com
REM @author Romain Pelisse romain.pelisse@atosorigin.com
REM
Sub UpdateSelectedTerm()
    Dim ControlModel As Object
    Dim term as String
    
    &apos; on récupère le terme cliqué
    ControlModel = mainDialog.getModel().getByName(&quot;Termes&quot;)
    on error goto noSelectedWord
    term = ControlModel.StringItemList(ControlModel.SelectedItems(0))
noSelectedWordNext:
    on error resume next
    &apos; et on met à jour la liste des synonymes
    ControlModel = mainDialog.getModel().getByName(&quot;remplacement&quot;)
	ControlModel.setPropertyValue(&quot;Text&quot;,term)
	Exit Sub

noSelectedWord:
	term = &quot;&quot;
	goto noSelectedWordNext
End Sub                    
</script:module>
