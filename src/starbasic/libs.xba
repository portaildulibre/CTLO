<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="libs" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit
REM
REM Data for the service layer
REM
&apos;Private maxwords as Integer


REM data for the functionnality part
Private results as Object 			&apos; Array of results from the last search for foreign term
Private currentResult as Integer 	&apos; index of the current row in the results table
Private cursor as Object 			&apos; Cursor on the current selection
Private ignoresTerms as Integer 	&apos; TODO:index dans le tbl (le &quot;run&quot;)
Private tab as Object 				&apos; TODO:ingoreALl liste de TERM
Private mode as String 				&apos; selection, all, etc.
Private IgnoreTermArray as Object

REM 
REM data for the HMI layer
REM
Private Const dialogueLibraryName = &quot;terminologie&quot;
Private Const sDialogName = &quot;dialogues&quot;
Private Const REMPLACEMENT_FIELD_NAME = &quot;remplacement&quot;
Private mainDialog as Object

Sub Main
&apos;	BasicLibraries.LoadLibrary(&quot;XrayTool&quot;)
	SelectionOpen
&apos;	testPPrados
End Sub


REM
REM Retrieve and build the Uno Service associated with this plugin, if and
REM only if the service as not already be fetched.
REM
REM @author Romain PELISSE romain.pelisse@atosorigin.com
REM
Dim terminologieService_ as Object

Function terminologieService() as Object
	if  isNull(terminologieService_) then
		terminologieService_ = createUnoService( &quot;org.atosorigin.ctOO.comp.CtOO3&quot; )
	end if
	terminologieService=terminologieService_
End Function



REM ****************************************************************************************
REM		UNIT TEST PART
REM 

Sub testPPrados
	Dim i as integer
	Dim selectCursor as Object
	Dim curs As Object
	Dim visualCursor As Object
	Dim currentText As Object
	Dim selectionCursor As Object
	Dim parser As Object
	Dim maxwords As Integer
	
	parser = createUnoService( &quot;org.atosorigin.ctOO.comp.CtOO3&quot; )
	&apos;FIXME: this should be far more better : maxwords=parser.maxwords
	maxwords = 3 
	
	visualCursor = ThisComponent.currentController.ViewCursor
	currentText = visualCursor.Text
	selectionCursor = currentText.createTextCursorByRange(visualCursor)
	msgbox( selectionCursor.String)
	results = parser.search(selectionCursor.String)
	part =  selectPartOfText(ThisComponent.currentController.ViewCursor,results(0))
	msgbox(part.String)
&apos;	ShowDialog(results(0).foreignTerm.domaines,&quot;web&quot;)
	selectCursor =  ThisComponent.currentController.ViewCursor
	
End Sub

REM TO DELETE

REM Sub addAutomaticLaunch( toAddStr , addonKey, filePath )
REM End Sub
REM Sub rechercheTerminologique()                                                                                                                                             
REM End Sub    


REM
REM 
REM ****************************************************************************************



REM **********************************************************************************************
REM **********************************************************************************************
REM 	FUNCTIONNALITY METHODS
REM **********************************************************************************************
REM **********************************************************************************************


REM
REM	This function must be run at the start of any kind of verification, 
REM	to initialize properly global variables
REM
Sub initializeRun()
	Redim results(0)
	currentResult = -1
End Sub

Sub SelectionOpen()
	mode=&quot;selection&quot;
	cursor=ThisComponent.currentController.viewCursor
	if IsNull(mainDialog) then
		mainDialog=Dialog_ctr()
	end if
	if Dialog_FSM(mode,&quot;open&quot;)=true then
		mainDialog.execute()
	end if
End Sub

Sub Iterator_init()
	currentResult=0
End Sub

Function Iterator_next()
	do while (currentResult &lt; UBound(results) )
		currentResult = currentResult + 1
		Iterator_next=currentResult
		if (not isIgnoreTerm(results(currentResult))) then
			exit do
		end if
	loop
	if (currentResult = UBound(results) ) then
		Iterator_next=-1
	end if
End Function

Function IsIgnoreTerm(result as object) as boolean
	IsIgnoreTerm=false
	&apos; Check ignore term
	if not isNull(IgnoreTermArray) then
		Dim index as Integer
		for index = LBound(IgnoreTermArray) to UBound(IgnoreTermArray)
			Dim word as string
			word = selectPartOfText(cursor,result).String &apos;FIXME: renv. string dans result
			if IgnoreTermArray(index).String = word then 
				IsIgnoreTerm=true
			end if
		next
	end if
End Function			

Function Iterator_HasNext() as boolean
	if isNull(results) then
		Iterator_HasNext=false
	elseif  UBound(results)=-1 then
		Iterator_HasNext=false
	else
		Iterator_HasNext=(currentResult&lt;&gt;-1) and (currentResult &lt;= UBound(results))
	end if
End Function

Function Iterator_cur() as Integer
	Iterator_cur=currentResult
End Function

REM Finite state machine for dialog
function Dialog_FSM(state as String, event as String) as boolean
	Dim result as Object
	Dim replaceCursor as Object
	Dim remplacement as String
	Dim foreignTerm as String
	Dialog_FSM=true
	select case state
		case &quot;selection&quot;
			if isNull(results) then
				results=checkSelection(cursor)
				Iterator_init()
				if not Iterator_hasNext() then
					Dialog_Close()
					Dialog_FSM=false &apos; It&apos;s necessary to open the dialog
				Else
					Dialog_set(results(Iterator_cur))
				end if
			end if
&apos;			result = results(Iterator_cur) &apos; failed at runtime
			redim results(0)	
			
			select case event
				case &quot;ignore&quot;
					REM if there is still results to be dealt with...
					dim n as integer
					n=Iterator_next()
					If (n &lt;&gt; -1) Then		
						Dialog_set(results(n))
					Else
						REM otherwise, we&apos;re done here
						Iterator_init()
						results = nothing
						Dialog_Close()
					End If
					
				case &quot;replace&quot;
					replaceCursor = selectPartOfText(cursor,result)
					remplacement = mainDialog.getModel().getByName(&quot;remplacement&quot;).getPropertyValue(&quot;Text&quot;)
					replaceCursor.String = remplacement
					REM We modify the target&apos;s text, we need to recheck it
&apos;					results=null &apos; this failed at runtime
					currentResult = -1
					
				case &quot;ignoreall&quot;
					foreignTerm =  mainDialog.getModel().getByName(&quot;anglicisme&quot;).getPropertyValue(&quot;Text&quot;)
					REM 
					&apos; Resize ignore term array
					Dim l as Integer
					if (isNull(IgnoreTermArray)) then
						l=0
					else
						l=UBound(IgnoreTermArray)+1
					end if
					ReDim IgnoreTermArray(l)
					&apos; Add to array
					IgnoreTermArray(UBound(IgnoreTermArray)) = selectPartOfText(cursor,result)
					Dialog_FSM(state,&quot;ignore&quot;) &apos; FIXME: boucle avec state end ?

				case &quot;replaceall&quot;
			end select
		case &quot;alldoc&quot; &apos; Utilisation d&apos;un iterateur all doc ?
			select case event
				case &quot;ignore&quot;
				case &quot;replace&quot;
				case &quot;ignoreall&quot;
				case &quot;replaceall&quot;
			end select
	end select
	if not Iterator_hasNext() then
		Dialog_Close()
		Dialog_FSM=false &apos; Is it necessary to open the dialog ? no
	end if
End function

REM
REM	This routine initialize the &quot;check my selection&quot; functionnality.
REM
REM @author Romain PELISSE romain.pelisse@atosorigin.com
REM
REM      
Function CheckSelection(cursor as Object) as Object                                                                                                                                                    
	Dim currentText as Object
	Dim selectedText as String
	
	currentText = cursor.Text
	&apos; cursor will keep all text selected
	cursor = currentText.createTextCursorByRange(cursor)
	selectedText = cursor.String
	If NOT isNull(selectedText) AND selectedText &lt;&gt; &quot;&quot; Then
		dim a as object
		results = terminologieService.search(selectedText)
		currentResult = 0
		CheckSelection=results
	end if
End Function    

&apos;
&apos;	Vérifie l&apos;intégralité du document.

&apos; TODO: gérer equalement les tableaux, et autres textes
&apos;
Sub checkDocument()
 Dim listParagraph as Object
 listParagraph = theDocument.text.createEnumeration()
 do while listParagraph.hasMoreElements
  elementText = listParagraph.nextElement
  if (elementText.supportsService(&quot;com.sun.star.text.Paragraph&quot;)) then
		parser = terminologieService 
  end if
 loop
End sub


REM TODO: not really used for the moment...
&apos; Selection d&apos;une portion limité à n mots avant et après la selection, 
&apos; bornée au paragraphe courant.
Function selectPart(theText as Object,maxwords as Integer) as Object
	Dim portionCursor as Object 
	Dim startWordCursor as Object
	Dim endWordCursor as Object
	Dim paragraphCursor as Object
	Dim nbCharacter as integer
	
	startWordCursor = theText.createTextCursorByRange(ThisComponent.currentController.viewCursor)
	endWordCursor = theText.createTextCursorByRange(ThisComponent.currentController.viewCursor)
	paragraphCursor = theText.createTextCursorByRange(ThisComponent.currentController.viewCursor)
	portionCursor = theText.createTextCursorByRange(ThisComponent.currentController.viewCursor)
	
	paragraphCursor.gotoStartOfParagraph(false)
	paragraphCursor.gotoEndOfParagraph(true)
	
	startWordCursor.gotoStartOfWord(false)
	for nbCharacter = 1 to maxwords
		startWordCursor.gotoPreviousWord(false)
	next
	for nbCharacter = 1 to maxwords - 1
		endWordCursor.gotoNextWord(true) 
	next
	endWordCursor.gotoEndOfWord(false)
	
	portionCursor = theText.createTextCursor()
	if (theText.compareRegionStarts(startWordCursor,paragraphCursor) &gt; 0) then
		portionCursor.gotoRange(endWordCursor.end,true)
	else
		portionCursor.gotoRange(paragraphCursor.end,true)
	end if
	selectPart=portionCursor
End Function

REM Events call back                                                                                                                                  
Sub ActivateReplaceButton()                                                                                                                                               
End Sub                    
                                                                                                                                               
Sub KeyPressedInDialog(Event As Object)                                                                                                                                   
End Sub

Sub Ignore()
	Dialog_FSM(mode,&quot;ignore&quot;)
End Sub

Sub ReplaceAnglicisme()
	Dialog_FSM(mode,&quot;replace&quot;)
End Sub

Sub ReplaceAllAnglicisme()
	Dialog_FSM(mode,&quot;replaceall&quot;)
End Sub

Sub RemplaceInSelection(replace as Object)
End Sub

Sub IgnoreAll()	 
	Dialog_FSM(mode,&quot;ignoreall&quot;)
End Sub

Sub SetupKeyHandler                                                                                                                                                       
End Sub                                                                                                                                                                   
Sub RemoveKeyHandler                                                                                                                                                      
End Sub                                                                                                                                                                   
Sub addHook                                                                                                                                                               
End Sub                                                                                                                                                                   
Sub removeHook                                                                                                                                                            
End Sub                                                                                                                                                                   
Sub KeyHandler_disposing                                                                                                                                                  
End Sub                                                                                                                                                                   
Sub KeyHandler_keyReleased(oKeyEvent As New com.sun.star.awt.KeyHandler) As Boolean                                                                                       
End Sub                                                                                                                                                                   


REM **********************************************************************************************
REM **********************************************************************************************
REM 	IHM METHODS
REM **********************************************************************************************
REM **********************************************************************************************
                                                                                       
REM
REM	This routine display the main dialog. 
REM
REM @author Romain PELISSE romain.pelisse@atosorigin.com
REM
REM	@arg : an identified foreignTerm with its metadata
REM

Sub Dialog_set(result as Object)
	if IsNull(mainDialog) then
		mainDialog=Dialog_ctr()
	end if
	Dim domains as Object
	Dim term as String
	domains=result.foreignTerm.domaines
	term=selectPartOfText(cursor,results(currentResult)).getString()
    Dim DialogModel As Object
    Dim ControlModel As Object
		
    DialogModel = mainDialog.getModel()
    ControlModel = DialogModel.getByName(&quot;anglicisme&quot;)
    ControlModel.setPropertyValue(&quot;Text&quot;, term)
    ControlModel = DialogModel.getByName(&quot;Domaines&quot;)
	&apos; Building the domains list from results
	Dim domainsList(UBound(domains) - LBound(domains)) As String
	Dim indexDomain As Integer	
	for indexDomain = LBound(domains) to UBound(domains)
		domainsList(indexDomain) = domains(indexDomain).name
	next	
	ControlModel.StringItemList = domainsList()
	&apos; Preselection of the first item
	definePreselectedItem(ControlModel)
	UpdateTermsList(domains)
End Sub                                                                                                                                                                   

REM
REM Handy routine to preselect the appropriate term of any list box
REM TODO: Is this necessary ? Aren&apos;t there any other (better) way to do this ?
REM
Sub definePreselectedItem(ControlModel as Object) &apos; FUTURE: add this param &quot;index as Integer&apos;
	Dim preselectionItems(1) As Integer
	preselectionItems(0) = 0
	ControlModel.SelectedItems = preselectionItems()	
End Sub

REM
REM Retrieve dialog descriptor and build it
REM
REM @author Romain PELISSE romain.pelisse@atosorigin.com
REM @author Manuel Odesser modesser@linagora.com
REM
Function Dialog_ctr
    Dim oLibContainer As Object
    Dim oInputStreamProvider As Object
    Dim oLib As Object
    &apos; retrieving from lib, the dialog descriptor
    DialogLibraries.loadLibrary(dialogueLibraryName)
    &apos; Let&apos;s build the dialog box
    oInputStreamProvider = DialogLibraries.getByName(dialogueLibraryName).getByName(sDialogName)
    Dialog_ctr = CreateUnoDialog(oInputStreamProvider)
End Function

REM
REM Update synonyms list on the main dialog
REM 
REM @author Manuel Odesser modesser@linagora.com
REM	@author Romain Pelisse romain.pelisse@atosorigin.com
REM
Sub UpdateTermsList(domains as Object)
    Dim DialogModel As Object
    Dim ControlModel As Object
    Dim meaning as String
	Dim synonyms As Variant

	If IsNull(mainDialog) OR isNull(domains) Then
		&apos; Should never happens...
		Exit Sub
	End If
	&apos; Getting back the selected &apos;domain&apos;
    ControlModel = mainDialog.getModel().getByName(&quot;Domaines&quot;)
    on error goto noSelectedMeaning
	meaning = ControlModel.StringItemList(ControlModel.SelectedItems(0))

noSelectedMeaningNext:
    on error resume next
    &apos; updating the list
    ControlModel = mainDialog.getModel().getByName(&quot;Termes&quot;)
    Dim indexDomain as Integer
	For indexDomain = LBound(domains) To UBound(domains)
		&apos; Does this meaning match with the one we&apos;re looking for ? 
		If meaning = domains(indexDomain).name Then
			ControlModel.StringItemList = domains(indexDomain).synonymes
			Exit For
		EndIf
	Next
	definePreselectedItem(ControlModel)
	UpdateSelectedTerm
	Exit Sub

noSelectedMeaning:
	meaning = 0
	goto noSelectedMeaningNext

End Sub

REM
REM Display a text box
REM
REM @author Manuel Odesser modesser@linagora.com
REM @author Romain Pelisse romain.pelisse@atosorigin.com
REM
Sub ShowTextDialog(dialog as String)
	TextDialog_ctr(dialog).execute()
End Sub

REM
REM Display the help text
REM
REM	@author Romain Pelisse romain.pelisse@atosorigin.com
REM
Sub Help
	ShowTextDialog(&quot;help_text&quot;)
End Sub

REM
REM Display the about text
REM
REM	@author Romain Pelisse romain.pelisse@atosorigin.com
REM
Sub About
	ShowTextDialog(&quot;help_dialog&quot;)
End Sub


REM
REM Buid a text dialog
REM
REM @author Manuel Odesser modesser@linagora.com
REM	@author Roamin Pelisse romain.pelisse@atosorigin.com
REM 
Function TextDialog_ctr(sDialogName as String)
    Dim inputStreamProvider As Object
    Dim dialog As Object
   
    &apos; récupération de la librairie dans laquelle est définie la boîte
    DialogLibraries.loadLibrary(dialogueLibraryName)
    dialog = DialogLibraries.getByName(dialogueLibraryName)
    &apos; crée la boîte proprement dite
    TextDialog_ctr = CreateUnoDialog(dialog.getByName(sDialogName))
End Function
                                                                                                                                                              
REM
REM Close the mainDialog box
REM
REM @author Manuel Odesser modesser@linagora.com
REM
Sub Dialog_Close
	mainDialog.endExecute()
End Sub                                                                                                                                                                  
                                                                                                                                                                   
REM Update the displayed term with the appropriate value
REM
REM @author Manuel Odesser modesser@linagora.com
REM @author Romain Pelisse romain.pelisse@atosorigin.com
REM
Sub UpdateSelectedTerm()
    Dim ControlModel As Object
    Dim term as String
    
    &apos; on récupère le terme cliqué
    ControlModel = mainDialog.getModel().getByName(&quot;Termes&quot;)
    on error goto noSelectedWord
    term = ControlModel.StringItemList(ControlModel.SelectedItems(0))
noSelectedWordNext:
    on error resume next
    &apos; et on met à jour la liste des synonymes
    ControlModel = mainDialog.getModel().getByName(&quot;remplacement&quot;)
	ControlModel.setPropertyValue(&quot;Text&quot;,term)
	Exit Sub

noSelectedWord:
	term = &quot;&quot;
	goto noSelectedWordNext
End Sub                    

REM
REM Open the appropriate URL from the mainDialog
REM
REM @author Laurent Godard http://www.indesko.com/telechargements/ooowikipedia
REM 
Sub OpenExternalDatasourceURL()
	on error resume next
	Dim objlancer
	Dim handleErrors
	Dim adress as String
	Dim ControlModel As Object
	Dim term As String

	&apos; retrieving the foreign term value
	ControlModel =  oDialog.getModel().getByName(REMPLACEMENT_FIELD_NAME)
	&apos; FUTURE: When FranceTerme handle properly accentued character passed by Get
	&apos; this next call should be removed
	term = replaceAccentedCharacter( ControlModel.getPropertyValue(&quot;Text&quot;) )
	&apos; building the appropriate URL
	adress = ConvertToURL(&quot;http://franceterme.culture.fr/FranceTerme/recherche.html?TERME=&quot; + term)
	&apos; calling the external service
	handleErrors = com.sun.star.system.SystemShellExecuteFlags.NO_SYSTEM_ERROR_MESSAGE &apos;=1 or DEFAULTS=0
	objlancer = CreateUnoService(&quot;com.sun.star.system.SystemShellExecute&quot;)
	objlancer.execute(adresse, &quot;&quot;, handleErrors)
End Sub

REM Select part of the  
REM  Selection d&apos;une portion limité à n mots avant et après la selection, 
&apos; bornée au paragraphe courant.
Function selectPartOfText(cursor as Object,result as Object) as Object	
	Dim selectionCursor as Object

	selectionCursor = cursor.Text.createTextCursorByRange(cursor)
	selectionCursor.collapseToStart()
	selectionCursor.goRight(result.start,false)
	selectionCursor.goRight(result.stop,true) 
	selectPartOfText = selectionCursor
End Function


</script:module>
